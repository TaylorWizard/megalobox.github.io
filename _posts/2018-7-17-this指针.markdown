---
layout: post
title:  "this指针"
date:   2018-7-17 21:28:33 +0800
categories: front-end-development
tags: front-end-material
---

this指针相关问题

### 函数中的this指针
#### 普通函数中的this指针
- this在非严格模式下为全局对象（浏览器中为windows对象）：
```javascript
function test() {
  console.log(this) // windows
}
```
- this在严格模式下为undefined：
```javascript
'use strict'
function test() {
  console.log(this) // undefined
}
```

#### 构造函数中的this指针
- this指向新创建的实例：
```javascript
function New() { // 模拟new
  var obj = {};
  obj.__proto__ = Person.prototype;
  var res = Person.apply(obj, arguments); // 这一步，将Person构造函数的this指针指向了新创建的obj实例
  return typeof res === 'object' res : obj
}
```

#### 在成员方法中的this指针
- this指针指向方法的调用者。

### this指针使用中的问题
#### 忘记new操作符
- 如果在调用一个构造函数时忘记了new操作符，那么我们就相当于将this用在一个普通函数中，this会没有正确的值。
- 在非严格模式下“揽子”会被设置为全局变量：
```javascript
function Person(name) {
  this.name = name // 将“揽子”设置为了全局变量
}
var p = Person('揽子')
```
- 在严格模式下会报 "Cannot set property 'name' of undefined" 的错误。

#### 不正确的函数提取方式
- 如果在非严格模式下把一个方法作为函数来调用，那么this将指向全局对象并创建全局变量。
- 在严格模式下this为undefined，会得到一个警告。

```javascript
var obj = {
  name: '揽子',
  print: function() {
    console.log(this.name)
  }
}
function Test1() {
  obj.print()
}
function Test2(fn) {
  fn() // 这里的调用者是全局对象,所以print中的this指针也是指向的全局对象
}
Test1() // 揽子
Test2(obj.print) // undefined
```

#### 在方法中调用函数
- 在一个方法中使用函数,外接的this会被隐藏

```javascript
var obj = {
  name: '揽子',
  print: function() {
      setTimeout(function() {
          console.log(this.name) // ''
      }, 1000)
  }
}
obj.print()
```

### this指针问题解决方案
- that = this
- bind()
- forEach()：forEach的第二个参数可以指定回调函数中的this指针。